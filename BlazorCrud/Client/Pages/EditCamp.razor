@page "/editCamp/{campID:int}"
@using BlazorCrud.Shared.Models
@inject HttpClient Http
@inject NavigationManager urlNavigationManager
@using BlazorDateRangePicker

<h2>Edit camp</h2>
<hr />

<EditForm Model="@camp" OnValidSubmit="UpdateCamp">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label class="control-label col-md-12">Name</label>
        <div class="col-md-4">
            <input class="form-control" @bind="camp.CampName" />
        </div>
        <ValidationMessage For="@(() => camp.CampName)" />
    </div>

    <div class="form-group row">
        <label class="control-label col-md-12">Start Date</label>
        <div class="col-md-4">

            <DateRangePicker Drops="DropsType.Up"
                             SingleDatePicker="true"
                             OnSelectionStart="OnSelectionStart"
                             DateFormat="MMM dd yyyy"
                             placeholder="@camp.StartDate.ToString("MMM dd yyyy")" />

        </div>
        <ValidationMessage For="@(() => camp.StartDate)" />
    </div>

    <div class="form-group row">
        <label class="control-label col-md-12">Start Date</label>
        <div class="col-md-4">

            <DateRangePicker Drops="DropsType.Up"
                             SingleDatePicker="true"
                             OnSelectionStart="OnSelectionStart2"
                             DateFormat="MMM dd yyyy"
                             placeholder="@camp.EndDate.ToString("MMM dd yyyy")" />

        </div>
        <ValidationMessage For="@(() => camp.EndDate)" />
    </div>

    <div class="form-group row">
        <label class="control-label col-md-12">DIYs</label>
        <div class="col-md-4">
            <input type="number" @bind-value="camp.DIYs" />
        </div>
        <ValidationMessage For="@(() => camp.DIYs)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int campID { get; set; }

    public void OnSelectionStart(DateTimeOffset start)
    {
        camp.StartDate = start;

    }

    public void OnSelectionStart2(DateTimeOffset end)
    {
        camp.EndDate = end;

    }

    Camp camp = new Camp();

    protected override async Task OnInitializedAsync()
    {
        camp = await Http.GetJsonAsync<Camp>("/api/Camp/Details/" + campID);
    }

    protected async Task UpdateCamp()
    {
        await Http.SendJsonAsync(HttpMethod.Put, "api/Camp/Edit", camp);
        urlNavigationManager.NavigateTo("/fetchCamp");
    }

    void Cancel()
    {
        urlNavigationManager.NavigateTo("/fetchCamp");
    }
}