@page "/addUDate"
@using BlazorCrud.Shared.Models
@using BlazorCrud.Client.Shared
@using BlazorDateRangePicker
@inject HttpClient Http
@inject NavigationManager urlNavigationManager



<h1>Select Unavailable Dates</h1>
<hr />

<EditForm Model="@UDate" OnValidSubmit="CreateUDate">
    <DataAnnotationsValidator />


    <div class="form-group row">
        <label class="control-label col-md-12">Date</label>
        <div class="col-md-4">
            <input type="datetime" class="form-control" @bind="UDate.Date" />
        </div>
        <ValidationMessage For="@(() => UDate.Date)" />
    </div>


    @if (empList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="form-group row">
            <label class="control-label col-md-12">Teacher</label>
            <div class="col-md-4">
                <select class="form-control" @bind="UDate.TeacherID">
                    <option value="">-- Select Teacher --</option>
             
                    @foreach (var emp in empList)
                    {
                        <option value="@emp.TeacherId">@emp.TeacherName</option>
                    }
                </select>
            </div>

        </div>

    }
    @*
             <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                -- Select Teacher --
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">

                @foreach (var emp in empList)
                {
                    <a class="dropdown-item" href="#">@emp.TeacherName</a>
                }

            </div>
        </div>

    *@

    @*
        <div class="container">
            <div class="row">
                <div class='col-sm-6'>
                    <div class="form-group">
                        <div class='input-group date' id='datepicker'>
                            <input type='text' class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>
                @*       <script suppress-error="BL9992" type="text/javascript">
                        $(function () {
                            $('#datetimepicker1').datetimepicker();
                        });
                    </script>
            </div>
        put this back in oninitialized later

         await JSRuntime.InvokeAsync<string>(
                    "MyClass.multidatepicker", null
                     );

        </div>*@

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>

</EditForm>

@code {



    Teacher[] empList;

    protected override async Task OnInitializedAsync()
    {
        empList = await Http.GetJsonAsync<Teacher[]>("/api/Teacher/All");
       
    }


    UDate UDate = new UDate();

    protected async Task CreateUDate()
    {
        await Http.SendJsonAsync(HttpMethod.Post, "/api/UDate/Create", UDate);
        urlNavigationManager.NavigateTo("/fetchUDate");
    }

    void Cancel()
    {
        urlNavigationManager.NavigateTo("/fetchUDate");
    }
}